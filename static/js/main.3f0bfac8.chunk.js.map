{"version":3,"sources":["components/transcription.js","components/App.js","serviceWorker.js","index.js"],"names":["vowels","consonants","soft_consonants","vowels_with_j","е","ё","ю","я","ji_shi","ch_replace","c_replace","s_replace","Transcription","Object","classCallCheck","this","createClass","key","value","text","toLowerCase","newText","forEach","elem","regex","RegExp","replace","toConsumableArray","letter","index","array","keys","includes","regex_hard_sign","newText_2","length","regex_soft_sign","getTranscription","resultArray","id","element","push","App","props","_this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","inputText","target","result","state","voiceText","_this$audio","transcriptionArray","getTranscriptionArray","map","concat","audio","fetchAudio","apply","then","buffers","concatAudio","buffer","play","catch","error","console","log","Crunker","react_default","a","createElement","className","reactstrap_es","color","light","expand","href","navbar","row","for","type","name","onChange","onClick","readOnly","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f0bfac8.chunk.js","sourcesContent":["const vowels = [\"а\", \"о\", \"у\", \"э\", \"ы\", \"и\"];\r\nconst consonants = [\"б\", \"в\", \"г\", \"д\", \"ж\", \"з\", \"й\", \"к\", \"л\", \"м\", \"н\", \"п\", \"р\", \"с\", \"т\", \"ф\", \"х\", \"ц\", \"ч\", \"ш\", \"щ\"];\r\nconst soft_consonants = [\"б\", \"в\", \"г\", \"д\", \"з\", \"к\", \"л\", \"м\", \"н\", \"п\", \"р\", \"с\", \"т\", \"ф\", \"х\"];\r\n\r\nconst vowels_with_j = { \"е\": \"э\", \"ё\": \"о\", \"ю\": \"у\", \"я\": \"а\" };\r\nconst i = \"и\";\r\nconst j = \"й\";\r\n\r\nconst ji_shi = [[\"жи\", \"жы\"], [\"ши\", \"шы\"]];\r\n\r\nconst ch_replace = [\"сч\", \"зч\", \"зч\", \"жч\"];\r\nconst ch = \"щ\";\r\n\r\nconst c_replace = [\"ться\", \"тся\"];\r\nconst c = \"ца\";\r\n\r\nconst s_replace = [[\"сс\", \"с\"], [\"сш\", \"ш\"]];\r\nconst soft_sign = \"ь\";\r\n\r\nconst hard_sign = \"ъ\";\r\n\r\nexport class Transcription {\r\n\r\n    static getTranscription(text) {\r\n        text = text.toLowerCase();\r\n\r\n        let newText = \"\";\r\n\r\n        // пугаются бриться\r\n        c_replace.forEach((elem) => {\r\n            let regex = new RegExp(elem, 'g');\r\n            text = text.replace(regex, c);\r\n        });\r\n\r\n        // юла коюта кря скамья ёж + бязь вязь связь \r\n        [...text].forEach((letter, index, array) => {\r\n            if (Object.keys(vowels_with_j).includes(letter)) {\r\n                if (index === 0 ||\r\n                    array[index - 1] === \" \" ||\r\n                    array[index - 1] === soft_sign ||\r\n                    array[index - 1] === hard_sign ||\r\n                    vowels.includes(array[index - 1])) {\r\n                    newText += j;\r\n                    newText += vowels_with_j[letter];\r\n                    return;\r\n                } else {\r\n                    if (index !== 0 &&\r\n                        soft_consonants.includes(array[index - 1])) {\r\n                        newText += \"_\";\r\n                    }\r\n                    newText += vowels_with_j[letter];\r\n                    return;\r\n                }\r\n            }\r\n            newText += letter;\r\n        });\r\n\r\n        text = newText;\r\n\r\n        // жилы шило\r\n        ji_shi.forEach((elem) => {\r\n            let regex = new RegExp(elem[0], 'g');\r\n            text = text.replace(regex, elem[1]);\r\n        });\r\n\r\n        // счастье\r\n        ch_replace.forEach((elem) => {\r\n            let regex = new RegExp(elem, 'g');\r\n            text = text.replace(regex, ch);\r\n        });    \r\n\r\n        // класс\r\n        s_replace.forEach((elem) => {\r\n            let regex = new RegExp(elem[0], 'g');\r\n            text = text.replace(regex, elem[1]);\r\n        });\r\n\r\n        // подъезд\r\n        let regex_hard_sign = new RegExp(hard_sign, 'g');\r\n        text = text.replace(regex_hard_sign, '');\r\n\r\n        let newText_2 = \"\";\r\n        // бязь вязь нить\r\n        [...text].forEach((letter, index, array) => {\r\n            if (index !== array.length - 1 &&\r\n                (array[index + 1] === soft_sign || array[index + 1] === i) &&\r\n                soft_consonants.includes(letter)) {\r\n                newText_2 += letter;\r\n                newText_2 += \"_\";\r\n            } else {\r\n                newText_2 += letter;\r\n            }\r\n        });\r\n\r\n        text = newText_2;\r\n\r\n        let regex_soft_sign = new RegExp(soft_sign, 'g');\r\n        text = text.replace(regex_soft_sign, '');\r\n\r\n        return text;\r\n    };\r\n\r\n    static getTranscriptionArray(text) {\r\n        text = this.getTranscription(text);\r\n\r\n        let resultArray = [];\r\n        for (let id = 0; id < text.length; id++) {\r\n            const element = text[id];\r\n            if (text[id] === \" \") {\r\n                resultArray.push(\"pause\");\r\n                continue;\r\n            }\r\n            if (!vowels.includes(element) && !consonants.includes(element)) {\r\n                continue;\r\n            }\r\n            if (id === text.length - 1) {\r\n                resultArray.push(element);\r\n                continue;\r\n            }\r\n            if (text[id + 1] === \"_\") {\r\n                resultArray.push(element + \"_\");\r\n                id++;\r\n                continue;\r\n            } else {\r\n                resultArray.push(element);\r\n            }\r\n        }\r\n\r\n        return resultArray;\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport {\n    Navbar,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    Button,\n    FormGroup,\n    Label,\n    Input\n} from 'reactstrap';\nimport { Transcription } from './transcription';\nimport Crunker from 'crunker';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.audio = new Crunker();\n\n        this.state = {\n            inputText: 'Саша кушал кашу',\n            // inputText: 'юла коюта кря скамья ёж бязь вязь связь жилы шило счастье пугаются бриться класс подъезд бязь вязь нить',\n            result: ''\n        };\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <Navbar color=\"light\" light expand=\"md\">\n                    <NavbarBrand href=\"/\">Простой синтезатор речи</NavbarBrand>\n                    <Nav className=\"ml-auto\" navbar>\n                        <NavItem>\n                            Лабораторная работа №4 по курсу ЕЯзИИС\n                </NavItem>\n                    </Nav>\n                </Navbar>\n                <div className=\"content-container\">\n                    <div className=\"input-text-component-container\">\n                        <FormGroup row className=\"form-group-input-text\">\n                            <Label for=\"input-text-area\">Исходный текст</Label>\n                            <Input\n                                type=\"textarea\"\n                                name=\"text\"\n                                id=\"input-text-area\"\n                                value={this.state.inputText}\n                                onChange={this.handleChange}\n                            />\n                        </FormGroup>\n                    </div>\n                    <Button color=\"primary\" onClick={this.getTranscription}>Получить транскрипцию</Button>\n                    <div className=\"transcriptions-component-container\">\n                        <FormGroup row className=\"form-group-transcription\">\n                            <Label for=\"transcription-area\">Транскрипция</Label>\n                            <Input\n                                type=\"textarea\"\n                                name=\"text\"\n                                id=\"transcription-area\"\n                                readOnly\n                                value={this.state.result}\n                            />\n                        </FormGroup>\n                    </div>\n                    <Button color=\"success\" onClick={this.voiceText}>Прослушать текст</Button>\n                </div>\n            </div>\n        );\n    }\n\n    handleChange = (e) => {\n        this.setState({ inputText: e.target.value });\n    }\n\n    getTranscription = () => {\n        let result = '';\n\n        result = Transcription.getTranscription(this.state.inputText);\n\n        this.setState({ result: result });\n    }\n\n    voiceText = () => {\n        this.getTranscription();\n\n        let transcriptionArray = Transcription.getTranscriptionArray(this.state.inputText);\n\n        transcriptionArray = transcriptionArray.map((elem) => {\n            return `letters/${elem}.mp3`;\n        });\n\n        this.audio.fetchAudio(...transcriptionArray)\n            .then(buffers => this.audio.concatAudio(buffers))\n            .then(buffer => {\n                this.audio.play(buffer);\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}